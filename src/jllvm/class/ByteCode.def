#ifndef GENERATE_SELECTOR
    #error GENERATE_SELECTOR(name, base, body, parser, size) has to be defined to include this file
#endif

#ifndef GENERATE_SELECTOR_END
    #error GENERATE_SELECTOR_END(name, base, body, parser, size) has to be defined to include this file
#endif

#define SINGLETON_OP(name) GENERATE_SELECTOR(name, SingletonOp, {}, parseSingleton, 1)

SINGLETON_OP(AALoad)
SINGLETON_OP(AAStore)
SINGLETON_OP(AConstNull)
SINGLETON_OP(ALoad0)
SINGLETON_OP(ALoad1)
SINGLETON_OP(ALoad2)
SINGLETON_OP(ALoad3)
SINGLETON_OP(AReturn)
SINGLETON_OP(ArrayLength)
SINGLETON_OP(AStore0)
SINGLETON_OP(AStore1)
SINGLETON_OP(AStore2)
SINGLETON_OP(AStore3)
SINGLETON_OP(AThrow)
SINGLETON_OP(BALoad)
SINGLETON_OP(BAStore)
SINGLETON_OP(CALoad)
SINGLETON_OP(CAStore)
SINGLETON_OP(D2F)
SINGLETON_OP(D2I)
SINGLETON_OP(D2L)
SINGLETON_OP(DAdd)
SINGLETON_OP(DALoad)
SINGLETON_OP(DAStore)
SINGLETON_OP(DCmpG)
SINGLETON_OP(DCmpL)
SINGLETON_OP(DConst0)
SINGLETON_OP(DConst1)
SINGLETON_OP(DDiv)
SINGLETON_OP(DLoad0)
SINGLETON_OP(DLoad1)
SINGLETON_OP(DLoad2)
SINGLETON_OP(DLoad3)
SINGLETON_OP(DMul)
SINGLETON_OP(DNeg)
SINGLETON_OP(DRem)
SINGLETON_OP(DReturn)
SINGLETON_OP(DStore0)
SINGLETON_OP(DStore1)
SINGLETON_OP(DStore2)
SINGLETON_OP(DStore3)
SINGLETON_OP(DSub)
SINGLETON_OP(Dup)
SINGLETON_OP(DupX1)
SINGLETON_OP(DupX2)
SINGLETON_OP(Dup2)
SINGLETON_OP(Dup2X1)
SINGLETON_OP(Dup2X2)
SINGLETON_OP(F2D)
SINGLETON_OP(F2I)
SINGLETON_OP(F2L)
SINGLETON_OP(FAdd)
SINGLETON_OP(FALoad)
SINGLETON_OP(FAStore)
SINGLETON_OP(FCmpG)
SINGLETON_OP(FCmpL)
SINGLETON_OP(FConst0)
SINGLETON_OP(FConst1)
SINGLETON_OP(FConst2)
SINGLETON_OP(FDiv)
SINGLETON_OP(FLoad0)
SINGLETON_OP(FLoad1)
SINGLETON_OP(FLoad2)
SINGLETON_OP(FLoad3)
SINGLETON_OP(FMul)
SINGLETON_OP(FNeg)
SINGLETON_OP(FRem)
SINGLETON_OP(FReturn)
SINGLETON_OP(FStore0)
SINGLETON_OP(FStore1)
SINGLETON_OP(FStore2)
SINGLETON_OP(FStore3)
SINGLETON_OP(FSub)
SINGLETON_OP(I2B)
SINGLETON_OP(I2C)
SINGLETON_OP(I2D)
SINGLETON_OP(I2F)
SINGLETON_OP(I2L)
SINGLETON_OP(I2S)
SINGLETON_OP(IAdd)
SINGLETON_OP(IALoad)
SINGLETON_OP(IAnd)
SINGLETON_OP(IAStore)
SINGLETON_OP(IConstM1)
SINGLETON_OP(IConst0)
SINGLETON_OP(IConst1)
SINGLETON_OP(IConst2)
SINGLETON_OP(IConst3)
SINGLETON_OP(IConst4)
SINGLETON_OP(IConst5)
SINGLETON_OP(IDiv)
SINGLETON_OP(ILoad0)
SINGLETON_OP(ILoad1)
SINGLETON_OP(ILoad2)
SINGLETON_OP(ILoad3)
SINGLETON_OP(IMul)
SINGLETON_OP(INeg)
SINGLETON_OP(IOr)
SINGLETON_OP(IRem)
SINGLETON_OP(IReturn)
SINGLETON_OP(IShl)
SINGLETON_OP(IShr)
SINGLETON_OP(IStore0)
SINGLETON_OP(IStore1)
SINGLETON_OP(IStore2)
SINGLETON_OP(IStore3)
SINGLETON_OP(ISub)
SINGLETON_OP(IUShr)
SINGLETON_OP(IXor)
SINGLETON_OP(L2D)
SINGLETON_OP(L2F)
SINGLETON_OP(L2I)
SINGLETON_OP(LAdd)
SINGLETON_OP(LALoad)
SINGLETON_OP(LAnd)
SINGLETON_OP(LAStore)
SINGLETON_OP(LCmp)
SINGLETON_OP(LConst0)
SINGLETON_OP(LConst1)
SINGLETON_OP(LDiv)
SINGLETON_OP(LLoad0)
SINGLETON_OP(LLoad1)
SINGLETON_OP(LLoad2)
SINGLETON_OP(LLoad3)
SINGLETON_OP(LMul)
SINGLETON_OP(LNeg)
SINGLETON_OP(LOr)
SINGLETON_OP(LRem)
SINGLETON_OP(LReturn)
SINGLETON_OP(LShl)
SINGLETON_OP(LShr)
SINGLETON_OP(LStore0)
SINGLETON_OP(LStore1)
SINGLETON_OP(LStore2)
SINGLETON_OP(LStore3)
SINGLETON_OP(LSub)
SINGLETON_OP(LUShr)
SINGLETON_OP(LXor)
SINGLETON_OP(MonitorEnter)
SINGLETON_OP(MonitorExit)
SINGLETON_OP(Nop)
SINGLETON_OP(Pop)
SINGLETON_OP(Pop2)
SINGLETON_OP(Return)
SINGLETON_OP(SALoad)
SINGLETON_OP(SAStore)
SINGLETON_OP(Swap)

#define LOCAL_INDEX_OP(name) GENERATE_SELECTOR(name, LocalIndexedOp, {}, parseLocalIndexed, 2)

LOCAL_INDEX_OP(ALoad)
LOCAL_INDEX_OP(AStore)
LOCAL_INDEX_OP(DLoad)
LOCAL_INDEX_OP(DStore)
LOCAL_INDEX_OP(FLoad)
LOCAL_INDEX_OP(FStore)
LOCAL_INDEX_OP(ILoad)
LOCAL_INDEX_OP(IStore)
LOCAL_INDEX_OP(LLoad)
LOCAL_INDEX_OP(LStore)
LOCAL_INDEX_OP(Ret)

#define POOL_INDEX_OP(name) GENERATE_SELECTOR(name, PoolIndexedOp, {}, parsePoolIndexed, 3)
#define POOL_INDEX_SPECIAL_OP(name, size) GENERATE_SELECTOR(name, PoolIndexedOp, {}, parsePoolIndexed, size)

POOL_INDEX_SPECIAL_OP(LDC, 2)
POOL_INDEX_OP(ANewArray)
POOL_INDEX_OP(CheckCast)
POOL_INDEX_OP(GetField)
POOL_INDEX_OP(GetStatic)
POOL_INDEX_OP(InstanceOf)
POOL_INDEX_SPECIAL_OP(InvokeDynamic, 5)
POOL_INDEX_SPECIAL_OP(InvokeInterface, 5)
POOL_INDEX_OP(InvokeSpecial)
POOL_INDEX_OP(InvokeStatic)
POOL_INDEX_OP(InvokeVirtual)
POOL_INDEX_OP(LDCW)
POOL_INDEX_OP(LDC2W)
POOL_INDEX_OP(New)
POOL_INDEX_OP(PutField)
POOL_INDEX_OP(PutStatic)

#define BRANCH_OFFSET_OP(name) GENERATE_SELECTOR(name, BranchOffsetOp, {}, parseBranchOffset, 3)
#define BRANCH_OFFSET_SPECIAL_OP(name, size) GENERATE_SELECTOR(name, BranchOffsetOp, {}, parseBranchOffset, size)

BRANCH_OFFSET_OP(Goto)
BRANCH_OFFSET_SPECIAL_OP(GotoW, 5)
BRANCH_OFFSET_OP(IfACmpEq)
BRANCH_OFFSET_OP(IfACmpNe)
BRANCH_OFFSET_OP(IfICmpEq)
BRANCH_OFFSET_OP(IfICmpNe)
BRANCH_OFFSET_OP(IfICmpLt)
BRANCH_OFFSET_OP(IfICmpGe)
BRANCH_OFFSET_OP(IfICmpGt)
BRANCH_OFFSET_OP(IfICmpLe)
BRANCH_OFFSET_OP(IfEq)
BRANCH_OFFSET_OP(IfNe)
BRANCH_OFFSET_OP(IfLt)
BRANCH_OFFSET_OP(IfGe)
BRANCH_OFFSET_OP(IfGt)
BRANCH_OFFSET_OP(IfLe)
BRANCH_OFFSET_OP(IfNonNull)
BRANCH_OFFSET_OP(IfNull)
BRANCH_OFFSET_OP(JSR)
BRANCH_OFFSET_SPECIAL_OP(JSRw, 5)

GENERATE_SELECTOR(
    BIPush, ByteCodeBase, { std::int8_t value{}; }, parseBIPush, 2)
GENERATE_SELECTOR(NewArray, ArrayOp, {}, parseNewArray, 2)
GENERATE_SELECTOR(
    IInc, ByteCodeBase,
    {
        std::uint8_t index{};
        std::int8_t byte{};
    },
    parseIIncm, 3)
GENERATE_SELECTOR(
    SIPush, ByteCodeBase, { std::int16_t value{}; }, parseSIPush, 3)
GENERATE_SELECTOR(LookupSwitch, ByteCodeBase, {/* TODO */}, parseNotImplemented, lookupSwitchSize(m_current))
GENERATE_SELECTOR(MultiANewArray, ByteCodeBase, {/* TODO */}, parseNotImplemented, 4)
GENERATE_SELECTOR(TableSwitch, ByteCodeBase, {/* TODO */}, parseNotImplemented, tableSwitchSize(m_current))
GENERATE_SELECTOR_END(Wide, ByteCodeBase, {/* TODO */}, parseNotImplemented, wideSize(m_current))

#undef BRANCH_OFFSET_OP
#undef POOL_INDEX_OP
#undef LOCAL_INDEX_OP
#undef SINGLETON_OP
#undef GENERATE_SELECTOR_END
#undef GENERATE_SELECTOR
