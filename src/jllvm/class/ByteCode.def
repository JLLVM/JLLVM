#ifndef GENERATE_SELECTOR
    #error GENERATE_SELECTOR(name, base, body, parser, size, code) has to be defined to include this file
#endif

#ifndef GENERATE_SELECTOR_END
    #error GENERATE_SELECTOR_END(name, base, body, parser, size, code) has to be defined to include this file
#endif

#define SINGLETON_OP(name, code) GENERATE_SELECTOR(name, SingletonOp, {}, parseSingleton, 1, code)

SINGLETON_OP(AALoad, 0x32)
SINGLETON_OP(AAStore, 0x53)
SINGLETON_OP(AConstNull, 0x1)
SINGLETON_OP(ALoad0, 0x2a)
SINGLETON_OP(ALoad1, 0x2b)
SINGLETON_OP(ALoad2, 0x2c)
SINGLETON_OP(ALoad3, 0x2d)
SINGLETON_OP(AReturn, 0xb0)
SINGLETON_OP(ArrayLength, 0xbe)
SINGLETON_OP(AStore0, 0x4b)
SINGLETON_OP(AStore1, 0x4c)
SINGLETON_OP(AStore2, 0x4d)
SINGLETON_OP(AStore3, 0x4e)
SINGLETON_OP(AThrow, 0xbf)
SINGLETON_OP(BALoad, 0x33)
SINGLETON_OP(BAStore, 0x54)
SINGLETON_OP(CALoad, 0x34)
SINGLETON_OP(CAStore, 0x55)
SINGLETON_OP(D2F, 0x90)
SINGLETON_OP(D2I, 0x8e)
SINGLETON_OP(D2L, 0x8f)
SINGLETON_OP(DAdd, 0x63)
SINGLETON_OP(DALoad, 0x31)
SINGLETON_OP(DAStore, 0x52)
SINGLETON_OP(DCmpG, 0x98)
SINGLETON_OP(DCmpL, 0x97)
SINGLETON_OP(DConst0, 0xe)
SINGLETON_OP(DConst1, 0xf)
SINGLETON_OP(DDiv, 0x6f)
SINGLETON_OP(DLoad0, 0x26)
SINGLETON_OP(DLoad1, 0x27)
SINGLETON_OP(DLoad2, 0x28)
SINGLETON_OP(DLoad3, 0x29)
SINGLETON_OP(DMul, 0x6b)
SINGLETON_OP(DNeg, 0x77)
SINGLETON_OP(DRem, 0x73)
SINGLETON_OP(DReturn, 0xaf)
SINGLETON_OP(DStore0, 0x47)
SINGLETON_OP(DStore1, 0x48)
SINGLETON_OP(DStore2, 0x49)
SINGLETON_OP(DStore3, 0x4a)
SINGLETON_OP(DSub, 0x67)
SINGLETON_OP(Dup, 0x59)
SINGLETON_OP(DupX1, 0x5a)
SINGLETON_OP(DupX2, 0x5b)
SINGLETON_OP(Dup2, 0x5c)
SINGLETON_OP(Dup2X1, 0x5d)
SINGLETON_OP(Dup2X2, 0x5e)
SINGLETON_OP(F2D, 0x8d)
SINGLETON_OP(F2I, 0x8b)
SINGLETON_OP(F2L, 0x8c)
SINGLETON_OP(FAdd, 0x62)
SINGLETON_OP(FALoad, 0x30)
SINGLETON_OP(FAStore, 0x51)
SINGLETON_OP(FCmpG, 0x96)
SINGLETON_OP(FCmpL, 0x95)
SINGLETON_OP(FConst0, 0xb)
SINGLETON_OP(FConst1, 0xc)
SINGLETON_OP(FConst2, 0xd)
SINGLETON_OP(FDiv, 0x6e)
SINGLETON_OP(FLoad0, 0x22)
SINGLETON_OP(FLoad1, 0x23)
SINGLETON_OP(FLoad2, 0x24)
SINGLETON_OP(FLoad3, 0x25)
SINGLETON_OP(FMul, 0x6a)
SINGLETON_OP(FNeg, 0x76)
SINGLETON_OP(FRem, 0x72)
SINGLETON_OP(FReturn, 0xae)
SINGLETON_OP(FStore0, 0x43)
SINGLETON_OP(FStore1, 0x44)
SINGLETON_OP(FStore2, 0x45)
SINGLETON_OP(FStore3, 0x46)
SINGLETON_OP(FSub, 0x66)
SINGLETON_OP(I2B, 0x91)
SINGLETON_OP(I2C, 0x92)
SINGLETON_OP(I2D, 0x87)
SINGLETON_OP(I2F, 0x86)
SINGLETON_OP(I2L, 0x85)
SINGLETON_OP(I2S, 0x93)
SINGLETON_OP(IAdd, 0x60)
SINGLETON_OP(IALoad, 0x2e)
SINGLETON_OP(IAnd, 0x7e)
SINGLETON_OP(IAStore, 0x4f)
SINGLETON_OP(IConstM1, 0x2)
SINGLETON_OP(IConst0, 0x3)
SINGLETON_OP(IConst1, 0x4)
SINGLETON_OP(IConst2, 0x5)
SINGLETON_OP(IConst3, 0x6)
SINGLETON_OP(IConst4, 0x7)
SINGLETON_OP(IConst5, 0x8)
SINGLETON_OP(IDiv, 0x6c)
SINGLETON_OP(ILoad0, 0x1a)
SINGLETON_OP(ILoad1, 0x1b)
SINGLETON_OP(ILoad2, 0x1c)
SINGLETON_OP(ILoad3, 0x1d)
SINGLETON_OP(IMul, 0x68)
SINGLETON_OP(INeg, 0x74)
SINGLETON_OP(IOr, 0x80)
SINGLETON_OP(IRem, 0x70)
SINGLETON_OP(IReturn, 0xac)
SINGLETON_OP(IShl, 0x78)
SINGLETON_OP(IShr, 0x7a)
SINGLETON_OP(IStore0, 0x3b)
SINGLETON_OP(IStore1, 0x3c)
SINGLETON_OP(IStore2, 0x3d)
SINGLETON_OP(IStore3, 0x3e)
SINGLETON_OP(ISub, 0x64)
SINGLETON_OP(IUShr, 0x7c)
SINGLETON_OP(IXor, 0x82)
SINGLETON_OP(L2D, 0x8a)
SINGLETON_OP(L2F, 0x89)
SINGLETON_OP(L2I, 0x88)
SINGLETON_OP(LAdd, 0x61)
SINGLETON_OP(LALoad, 0x2f)
SINGLETON_OP(LAnd, 0x7f)
SINGLETON_OP(LAStore, 0x50)
SINGLETON_OP(LCmp, 0x94)
SINGLETON_OP(LConst0, 0x9)
SINGLETON_OP(LConst1, 0xa)
SINGLETON_OP(LDiv, 0x6d)
SINGLETON_OP(LLoad0, 0x1e)
SINGLETON_OP(LLoad1, 0x1f)
SINGLETON_OP(LLoad2, 0x20)
SINGLETON_OP(LLoad3, 0x21)
SINGLETON_OP(LMul, 0x69)
SINGLETON_OP(LNeg, 0x75)
SINGLETON_OP(LOr, 0x81)
SINGLETON_OP(LRem, 0x71)
SINGLETON_OP(LReturn, 0xad)
SINGLETON_OP(LShl, 0x79)
SINGLETON_OP(LShr, 0x7b)
SINGLETON_OP(LStore0, 0x3f)
SINGLETON_OP(LStore1, 0x40)
SINGLETON_OP(LStore2, 0x41)
SINGLETON_OP(LStore3, 0x42)
SINGLETON_OP(LSub, 0x65)
SINGLETON_OP(LUShr, 0x7d)
SINGLETON_OP(LXor, 0x83)
SINGLETON_OP(MonitorEnter, 0xc2)
SINGLETON_OP(MonitorExit, 0xc3)
SINGLETON_OP(Nop, 0x0)
SINGLETON_OP(Pop, 0x57)
SINGLETON_OP(Pop2, 0x58)
SINGLETON_OP(Return, 0xb1)
SINGLETON_OP(SALoad, 0x35)
SINGLETON_OP(SAStore, 0x56)
SINGLETON_OP(Swap, 0x5f)

#define LOCAL_INDEX_OP(name, code) GENERATE_SELECTOR(name, LocalIndexedOp, {}, parseLocalIndexed, 2, code)

LOCAL_INDEX_OP(ALoad, 0x19)
LOCAL_INDEX_OP(AStore, 0x3a)
LOCAL_INDEX_OP(DLoad, 0x18)
LOCAL_INDEX_OP(DStore, 0x39)
LOCAL_INDEX_OP(FLoad, 0x17)
LOCAL_INDEX_OP(FStore, 0x38)
LOCAL_INDEX_OP(ILoad, 0x15)
LOCAL_INDEX_OP(IStore, 0x36)
LOCAL_INDEX_OP(LLoad, 0x16)
LOCAL_INDEX_OP(LStore, 0x37)
LOCAL_INDEX_OP(Ret, 0xa9)

#define POOL_INDEX_OP(name, code) GENERATE_SELECTOR(name, PoolIndexedOp, {}, parsePoolIndexed, 3, code)
#define POOL_INDEX_SPECIAL_OP(name, size, code) GENERATE_SELECTOR(name, PoolIndexedOp, {}, parsePoolIndexed, size, code)

POOL_INDEX_SPECIAL_OP(LDC, 2, 0x12)
POOL_INDEX_OP(ANewArray, 0xbd)
POOL_INDEX_OP(CheckCast, 0xc0)
POOL_INDEX_OP(GetField, 0xb4)
POOL_INDEX_OP(GetStatic, 0xb2)
POOL_INDEX_OP(InstanceOf, 0xc1)
POOL_INDEX_SPECIAL_OP(InvokeDynamic, 5, 0xba)
POOL_INDEX_SPECIAL_OP(InvokeInterface, 5, 0xb9)
POOL_INDEX_OP(InvokeSpecial, 0xb7)
POOL_INDEX_OP(InvokeStatic, 0xb8)
POOL_INDEX_OP(InvokeVirtual, 0xb6)
POOL_INDEX_OP(LDCW, 0x13)
POOL_INDEX_OP(LDC2W, 0x14)
POOL_INDEX_OP(New, 0xbb)
POOL_INDEX_OP(PutField, 0xb5)
POOL_INDEX_OP(PutStatic, 0xb3)

#define BRANCH_OFFSET_OP(name, code) GENERATE_SELECTOR(name, BranchOffsetOp, {}, parseBranchOffset, 3, code)
#define BRANCH_OFFSET_SPECIAL_OP(name, size, code) \
    GENERATE_SELECTOR(name, BranchOffsetOp, {}, parseBranchOffset, size, code)

BRANCH_OFFSET_OP(Goto, 0xa7)
BRANCH_OFFSET_SPECIAL_OP(GotoW, 5, 0xc8)
BRANCH_OFFSET_OP(IfACmpEq, 0xa5)
BRANCH_OFFSET_OP(IfACmpNe, 0xa6)
BRANCH_OFFSET_OP(IfICmpEq, 0x9f)
BRANCH_OFFSET_OP(IfICmpNe, 0xa0)
BRANCH_OFFSET_OP(IfICmpLt, 0xa1)
BRANCH_OFFSET_OP(IfICmpGe, 0xa2)
BRANCH_OFFSET_OP(IfICmpGt, 0xa3)
BRANCH_OFFSET_OP(IfICmpLe, 0xa4)
BRANCH_OFFSET_OP(IfEq, 0x99)
BRANCH_OFFSET_OP(IfNe, 0x9a)
BRANCH_OFFSET_OP(IfLt, 0x9b)
BRANCH_OFFSET_OP(IfGe, 0x9c)
BRANCH_OFFSET_OP(IfGt, 0x9d)
BRANCH_OFFSET_OP(IfLe, 0x9e)
BRANCH_OFFSET_OP(IfNonNull, 0xc7)
BRANCH_OFFSET_OP(IfNull, 0xc6)
BRANCH_OFFSET_OP(JSR, 0xa8)
BRANCH_OFFSET_SPECIAL_OP(JSRw, 5, 0xc9)

GENERATE_SELECTOR(
    BIPush, ByteCodeBase, { std::int8_t value{}; }, parseBIPush, 2, 0x10)
GENERATE_SELECTOR(
    IInc, ByteCodeBase,
    {
        std::uint8_t index{};
        std::int8_t byte{};
    },
    parseIInc, 3, 0x84)
GENERATE_SELECTOR(LookupSwitch, ByteCodeBase, {/* TODO */}, parseNotImplemented, lookupSwitchSize(m_current), 0xab)
GENERATE_SELECTOR(MultiANewArray, PoolIndexedOp, { std::uint8_t dimensions; }, parseNotImplemented, 4, 0xc5)
GENERATE_SELECTOR(NewArray, ArrayOp, {}, parseNewArray, 2, 0xbc)
GENERATE_SELECTOR(
    SIPush, ByteCodeBase, { std::int16_t value{}; }, parseSIPush, 3, 0x11)
GENERATE_SELECTOR(TableSwitch, ByteCodeBase, {/* TODO */}, parseNotImplemented, tableSwitchSize(m_current), 0xaa)
GENERATE_SELECTOR_END(Wide, ByteCodeBase, {/* TODO */}, parseNotImplemented, wideSize(m_current), 0xc4)

#undef BRANCH_OFFSET_OP
#undef POOL_INDEX_OP
#undef LOCAL_INDEX_OP
#undef SINGLETON_OP
#undef GENERATE_SELECTOR_END
#undef GENERATE_SELECTOR
